dispersal_adonis = adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000)
treatments1 <- design$Salinity
levels(treatments1) <- c("0","5","9","13")
treatments2 <- design$Dispersal
levels(treatments2) <- c("0","1","2","3")
design
dispersal_adonis = adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000)
design <- na.rm=TRUE
design <- read.csv("E:/Grad/Mothur/mothur/design_CSI.csv", row.names=1,na.rm=TRUE)
design <- read.csv("E:/Grad/Mothur/mothur/design_CSI.csv", row.names=1)
treatments2 <- design$Dispersal
levels(treatments2) <- c("0","1","2","3")
design
dispersal_adonis = adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000)
newCSIdat <- cbind(design,CSIdataREL)
dispersal_adonis = adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000)
dispersal_adonis
salinity_adonis
require("vegan")
#min abundance is 20,726, we will sample to 20,000
CSIdata.r <- rrarefy(CSI.dat, 20000)
# Fisher's Alpha
fisher <- fisher.alpha(CSIdata.r)
fisher
# Species Richness
richness <- rowSums((CSIdata.r >= 1))
richness
# Shannon Diversity (my function gets the same answer)
shannon <- diversity(CSIdata.r, "shannon")
# Simpson's Evenness
simp.even <- diversity(CSIdata.r, "simpson")
# original simpsons code unsuccessful ("simp.even <- apply(CSIdata.r, 1, simp_even)") ... returned error "function: simp_even not found"
#Pielou's evenness
J <- shannon/log(specnumber(CSIdata.r[,-c(1:1)]))
#combined richness, diversity, evenness
CSI.DIVaquamicrobes <- cbind(design,richness,shannon,simp.even,J)
write.table(CSI.DIVaquamicrobes, file="CSI.DIVaquamicrobes.csv", sep=",", col.names=NA)
length(design$Salinity) == length(fisher)
# Hypothesis Testing
# First Check the order
length(design$Salinity) == length(fisher)
all.equal(gsub("-", "", rownames(design)), names(fisher))
fisher.lm <- lme(fisher ~ Salinity, random = ~1|Tank_., data = design)
anova(fisher.lm)
richness.lm <- lme(richness ~ Salinity, random = ~1|Tank_., data = design)
anova(richness.lm)
evenness.lm <- lme(simp.even ~ Salinity, random = ~1|Tank_., data = design)
anova(evenness.lm)
shannon.lm <- lme(shannon ~ Salinity, random = ~1|Tank_., data = design)
anova(shannon.lm)
install.packages("agricolae")
library(agricolae)
summary(shannon.lm)
shannon.lm2 <- lm(shannon ~ Salinity, data = CSI.DIVaquamicrobes)
HSD <- HSD.test(shannon.lm2,"Salinity", console=TRUE)
p <- ggplot(CSI.DIVaquamicrobes, aes(Salinity,shannon))
p + geom_boxplot() + theme_bw()
p + geom_boxplot() + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor =     element_blank(), axis.line = element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14),
axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=30, size=14), panel.border =
element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("Microbial Diversity") + ylab("Shannon Diversity Index (H')") +
scale_x_discrete(breaks=c("0","5","9","13"),
labels=c("0","5","9","13"))
sampleREL.dist <- vegdist(CSIdataREL, method="bray")
# Principal Coordinates Analysis
CSI_pcoa <- cmdscale(sampleREL.dist, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1 <- round(CSI_pcoa$eig[1] / sum(CSI_pcoa$eig), 3) * 100
explainvar2 <- round(CSI_pcoa$eig[2] / sum(CSI_pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2)
explainvar1
explainvar2
points <- cbind(as.data.frame(CSI_pcoa$points), treatments)
points <- cbind(as.data.frame(CSI_pcoa$points), treatments1)
L.centroids <- melt(points, id="treatments", measure.vars = c("V1", "V2"))
points <- cbind(as.data.frame(CSI_pcoa$points), Salinity)
points <- cbind(as.data.frame(CSI_pcoa$points), treatments1)
L.centroids <- melt(points, id="Salinity", measure.vars = c("V1", "V2"))
df <- as.data.frame(cent.dataframe)
p <- ggplot(df, aes(x=V1, y=V2, colour=cent.treats)) + theme_bw()
p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(size=5) +
scale_colour_manual(labels = c("0","5","9","13"),   values = c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00")) +
geom_point(shape=1, size = 5,colour = "black") +
theme(axis.title=element_text(size=18), axis.text=element_text(size=14), axis.text.x   = element_text(size=14), panel.border = element_rect(colour = "black",size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.9%)") + ylab("PCoA 2 (6.3%)") +
labs(color = "Microbial Diversity") +
guides(colour = guide_legend(override.aes = list(pch=21, size = 4, colour="black",
fill=c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00"))))
p <- ggplot(CSI.DIVaquamicrobes, aes(Salinity,shannon))
p + geom_boxplot() + theme_bw()
p + geom_boxplot() + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor =     element_blank(), axis.line = element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14),
axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=30, size=14), panel.border =
element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("Microbial Diversity") + ylab("Shannon Diversity Index (H')") +
scale_x_discrete(breaks=c("0","5","9","13"),
labels=c("0","5","9","13"))
sampleREL.dist <- vegdist(CSIdataREL, method="bray")
# Principal Coordinates Analysis
CSI_pcoa <- cmdscale(sampleREL.dist, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1 <- round(CSI_pcoa$eig[1] / sum(CSI_pcoa$eig), 3) * 100
explainvar2 <- round(CSI_pcoa$eig[2] / sum(CSI_pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2)
explainvar1
explainvar2
points <- cbind(as.data.frame(CSI_pcoa$points), treatments1)
L.centroids <- melt(points, id="treatments1", measure.vars = c("V1", "V2"))
centroids <- cast(L.centroids, variable ~ treatments1, mean)
centroids.se <- cast(L.centroids, variable ~ treatments1, se)
centroids.sd <- cast(L.centroids, variable ~ treatments1, sd)
cent.dataframe <- t(data.frame(rbind(centroids[1,-1], centroids[2,-1],
centroids.sd[1,-1],centroids.sd[2,-1])))
colnames(cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
cent.treats <- rownames(cent.dataframe)
df <- as.data.frame(cent.dataframe)
p <- ggplot(df, aes(x=V1, y=V2, colour=cent.treats)) + theme_bw()
p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(size=5) +
scale_colour_manual(labels = c("0","5","9","13"),   values = c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00")) +
geom_point(shape=1, size = 5,colour = "black") +
theme(axis.title=element_text(size=18), axis.text=element_text(size=14), axis.text.x   = element_text(size=14), panel.border = element_rect(colour = "black",size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.9%)") + ylab("PCoA 2 (6.3%)") +
labs(color = "Microbial Diversity") +
guides(colour = guide_legend(override.aes = list(pch=21, size = 4, colour="black",
fill=c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00"))))
ggsave("E:/Grad/Mothur/mothur/16SrRNA_CSI_Rplot.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
df <- as.data.frame(cent.dataframe)
p <- ggplot(df, aes(x=V1, y=V2, colour=cent.treats)) + theme_bw()
p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(size=5) +
scale_colour_manual(labels = c("0","5","9","13"),   values = c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00")) +
geom_point(shape=1, size = 5,colour = "black") +
theme(axis.title=element_text(size=18), axis.text=element_text(size=14), axis.text.x   = element_text(size=14), panel.border = element_rect(colour = "black",size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.9%)") + ylab("PCoA 2 (6.3%)") +
labs(color = "Salinity") +
guides(colour = guide_legend(override.aes = list(pch=21, size = 4, colour="black",
fill=c("#FFFFCC", "#FFFF00", "#FF9933", "#66CC00"))))
ggsave("E:/Grad/Mothur/mothur/16SrRNA_CSI_Rplot.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
capture.output(dispersal_adonis), file="disp_permanova.csv")
capture.output(summary(dispersal_adonis)), file="disp_permanova.csv")
capture.output(summary(dispersal_adonis), file="disp_permanova.csv")
capture.output(summary(salinity_adonis), file="sal_permanova.csv")
capture.output(adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000)), file="disp_permanova.csv")
capture.output(adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000), file="disp_permanova.csv")
capture.output(adonis(newCSIdat[,-c(1:15)] ~ Salinity, method = "bray", data = newCSIdat, perm=1000), file="sal_permanova.csv")
capture.output(adonis(newCSIdat[,-c(1:15)] ~ Dispersal, method = "bray", data = newCSIdat, perm=1000), file="disp_permanova.doc")
capture.output(adonis(newCSIdat[,-c(1:15)] ~ Salinity, method = "bray", data = newCSIdat, perm=1000), file="sal_permanova.doc")
capture.output(anova(fisher.lm), file="fisher.lm.doc")
capture.output(anova(richness.lm), file="richness.lm.doc")
capture.output(anova(evenness.lm), file="evenness.lm.doc")
capture.output(anova(shannon.lm), file="shannon.lm.doc")
p <- ggplot(CSI.DIVaquamicrobes, aes(Salinity,shannon))
p + geom_boxplot() + theme_bw()
p + geom_boxplot() + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor =     element_blank(), axis.line = element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14),
axis.text.x = element_text(vjust=0.65, hjust=0.5, angle=30, size=14), panel.border =
element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("Salinity") + ylab("Shannon Diversity Index (H')") +
scale_x_discrete(breaks=c("0","5","9","13"),
labels=c("0","5","9","13"))
ggsave("E:/Grad/Mothur/mothur/shannondiv.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
fisher.lm <- lme(fisher ~ Salinity, data = design)
length(design$Salinity) == length(fisher)
all.equal(gsub("-", "", rownames(design)), names(fisher))
fisher.lm <- lme(fisher ~ Salinity, data = design)
fisher.lm <- lme(fisher ~ Salinity, random=, data = design)
fisher.lm <- lme(fisher ~ Salinity, random=none, data = design)
fisher.lm <- lme(fisher ~ Salinity, random=, data = design)
design
fisher.lm <- lme(fisher ~ Salinity, random=Treatment, data = design)
fisher.lm <- lme(fisher ~ Salinity, data = design)
richness.lm <- lme(richness ~ Salinity, data = design)
fisher.lm <- lme(fisher ~ Salinity, random=1|Treatment, data = design)
all.equal(gsub("-", "", rownames(design)), names(fisher))
fisher.lm <- lme(fisher ~ Salinity, random=1|Treatment, data = design)
fisher.lm <- lme(fisher ~ Salinity, random = ~1|Treatment, data = design)
length(design$Salinity) == length(fisher)
all.equal(gsub("-", "", rownames(design)), names(fisher))
fisher.lm <- lme(fisher ~ Salinity, random = ~1|Treatment, data = design)
anova(fisher.lm)
capture.output(anova(fisher.lm), file="fisher.lm.doc")
richness.lm <- lme(richness ~ Salinity, random = ~1|Treatment, data = design)
anova(richness.lm)
capture.output(anova(richness.lm), file="richness.lm.doc")
evenness.lm <- lme(simp.even ~ Salinity, random = ~1|Treatment, data = design)
anova(evenness.lm)
capture.output(anova(evenness.lm), file="evenness.lm.doc")
shannon.lm <- lme(shannon ~ Salinity, random = ~1|Treatment, data = design)
anova(shannon.lm)
capture.output(anova(shannon.lm), file="shannon.lm.doc")
#load required packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape")
require("BiodiversityR")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
CSIdata <- read.otu("E:/Grad/Mothur/mothur/CSI.15.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.shared")
source("E:/Grad/Mothur/MothurTutorial.updated/MothurTutorial_updated/bin/DiversityFunctions.R")
source("E:/Grad/Mothur/MothurTutorial.updated/MothurTutorial_updated/bin/MothurTools.R")
CSIdata <- read.otu("E:/Grad/Mothur/mothur/CSI.15.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.opti_mcc.unique_list.shared")
install.packages("mass")
install.packages("mass")
```
library(MASS)
CSIdat <- CSIdata[which(rowSums(CSIdata) >= 20000), ]
CSIdata2 <- CSIdat[grepl("CSI[0-9][0-9]", rownames(CSIdat)), ]
CSI.dat <- CSIdata2[, which(colSums(CSIdata2) >= 2)]
d <- dist(CSI.dat)
fit <- isoMDS(d,k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
ggsave("E:/Grad/Mothur/mothur/NMDS.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
ggsave("E:/Grad/Mothur/mothur/NMDS.doc", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
ggsave("E:/Grad/Mothur/mothur/NMDS.doc", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
ggsave("E:/Grad/Mothur/mothur/NMDS.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
d <- dist(CSI.dat)
fit <- metaMDS(d,k=2)
fit <- monoMDS(d,k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
fit <- metaMDS(d,k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
fit <- metaMDS(d,k=2)
CSIdataREL <- CSI.dat
for (i in 1:dim(CSI.dat)[1]) {
CSIdataREL[i, ] <- CSI.dat[i, ]/sum(CSI.dat[i,
])
}
d <- dist(CSIdataREL)
x <- fit$points[,1]
y <- fit$points[,2]
d <- dist(CSIdataREL)
fit <- metaMDS(d,k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
ggsave("E:/Grad/Mothur/mothur/NMDS.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
plot(x,y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x,y,labels = row.names(CSI.dat), cex=0.7)
fit
setwd("C:/Users/astuc/Desktop/GitHub/CSI_Dispersal/analyses")
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,
])
}
# import taxonomy file for later
csi_tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy", format = "rdp", tax.levels = 6, col.tax = 3)
# bind design and bact files
csi.full <- cbind(design_final,csi_relabun)
# df <- decostand(csi_relabun, method="standardize")
# NOTE need to specify method.. not sure if this one is right - do not need to run decostand b/c relative abundance calculated manually in lines 99-101
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielouâs evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# run full parametric statistical model
shannon.lm <- lm(shannon ~ Dispersal*Salinity*Date+Dispersal*Salinity+Salinity*Date+Dispersal*Date+Dispersal+Salinity+Date, data = csi_otu.div)
shannon.lm
anova(shannon.lm)
# run linear regression measured salinity used instead of 'factor' salinity
shannon.reg <- lm(shannon~Salinity_real, data = csi_otu.div)
summary(shannon.reg)
## maybe use Werba code - discuss with Jo and McCoy
# Graphing Shannon Diversity - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Shannon Diversity Index (H')")
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Shannon Diversity x MEASURED Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity_real, y=shannon, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity (measured)") + ylab("Shannon Diversity Index (H')")
ggsave("../figures/shannon_SalReal.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# run full parametric statistical model
J.lm <- lm(J ~ Dispersal*Salinity*Date+Dispersal*Salinity+Salinity*Date+Dispersal*Date+Dispersal+Salinity+Date, data = csi_otu.div)
J.lm
anova(J.lm)
# run linear regression measured salinity used instead of 'factor' salinity
J.reg <- lm(J~Salinity_real, data = csi_otu.div)
summary(J.reg)
# Graphing Pielous J - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=J, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Pielou's J")
ggsave("../figures/pielousj.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Pielous J x MEASURED Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity_real, y=J, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity (measured)") + ylab("Pielou's J")
ggsave("../figures/pielouj_SalReal.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# run full parametric statistical model
richness.lm <- lm(richness ~ Dispersal*Salinity*Date+Dispersal*Salinity+Salinity*Date+Dispersal*Date+Dispersal+Salinity+Date, data = csi_otu.div)
richness.lm
anova(richness.lm)
# run linear regression measured salinity used instead of 'factor' salinity
richness.reg <- lm(richness~Salinity_real, data = csi_otu.div)
summary(richness.reg)
# Graphing richness - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=richness, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("richness")
ggsave("../figures/richness.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing richness x MEASURED Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity_real, y=shannon, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity (measured)") + ylab("richness")
ggsave("../figures/richness_SalReal.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
carbon_min <- read.csv("../data/Cmin-data.csv")
carbon_min
carbon_min <- read.csv("../data/Cmin-data.csv")
carbon_min
carbon.lm <- lm((carbon_min(ngCO2C_mL_day)) ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
carbon.lm <- lm(ngCO2C_mL_day ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
anova(carbon.lm)
carbon.lm
anova(carbon.lm)
p <- ggplot(csi_otu.div, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p <- ggplot(csi_otu.div, aes(data=carbon_min, x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
carbon_min
p <- ggplot(csi_otu.div, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p <- ggplot(csi_otu.div, aes(x=Salinity, y=carbon_min(ngCO2C_mL_day), color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
carbon.lm <- lm(ngCO2C_mL_day ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
anova(carbon.lm)
p <- ggplot(carbon_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2 / mL / day)")
ggsave("../figures/carbon_mineralization.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(carbon_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2/mL/day)")
ggsave("../figures/carbon_mineralization.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(carbon_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=12,face="bold"), axis.text=element_text(size=10), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=10), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2/mL/day)")
ggsave("../figures/carbon_mineralization.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(carbon_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=10,face="bold"), axis.text=element_text(size=8), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=8), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2/mL/day)")
ggsave("../figures/carbon_mineralization.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
anova(carbon.lm)
p <- ggplot(carbon_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=10,face="bold"), axis.text=element_text(size=8), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=8), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2/mL/day)")
carbon.lm <- lm(ngCO2C_mL_day ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
carbon.lm
summary(J.reg)
carbon.reg <- lm(ngCO2C_mL_day~Salinity, data = carbon_min)
summary(carbon.reg)
carbon_min <- read.csv("../data/Cmin-data-NO-SOURCE.csv")
carbon2.lm <- lm(ngCO2C_mL_day ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
anova(carbon2.lm)
# run linear regression (must use 'factor' salinity -- don't have real salinity for these tanks/samples)
carbon2.reg <- lm(ngCO2C_mL_day~Salinity, data = carbon_min)
summary(carbon2.reg)
carbon2_min <- read.csv("../data/Cmin-data-NO-SOURCE.csv")
carbon2.lm <- lm(ngCO2C_mL_day ~ Dispersal + Salinity + Dispersal*Salinity, data = carbon_min)
anova(carbon2.lm)
carbon2.reg <- lm(ngCO2C_mL_day~Salinity, data = carbon_min)
summary(carbon2.reg)
p <- ggplot(carbon2_min, aes(x=Salinity, y=ngCO2C_mL_day, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=10,face="bold"), axis.text=element_text(size=8), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=8), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Carbon Mineralization (ng CO2/mL/day)")
ggsave("../figures/carbon_mineralization_nosource.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
