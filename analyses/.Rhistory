<<<<<<< HEAD
install.packages("R2jags")
install.packages("tidyr")
install.packages("lme4")
install.packages("tidyverse")
install.packages("ggplot2")
library(readxl)
library(tidyverse)
library(ggplot2)
dat <- read_excel("~/Preliminary Data/Data_sheet_FeedingExpt.xlsx")
cleandat <- dat %>%
group_by(Treatment) %>%
summarize_all(funs(mean,sd))
cleandat <- dat %>%
group_by(Treatment) %>%
summarize_all(funs(mean,sd), na.rm=TRUE)
warnings()
View(cleandat)
cleandat<- cleandat[,c(1,5,7,11,13,21,23,27,29)]
View(cleandat)
cdat1 <- cleandat[,c(2,3,6,7)]
cdat2 <- cleandat[,c(4,5,8,9)]
bind_rows(cdat1,cdat2)
rownames(cdat1) <- c("chl_mean", "Nh4_mean", "chl_SD", "Nh4_SD")
?rownames
cdat1 <- data.frame(cleandat[,c(2,3,6,7)])
rownames(cdat1) <- c("chl_mean", "Nh4_mean", "chl_SD", "Nh4_SD")
colnames(cdat1) <- c("chl_mean", "Nh4_mean", "chl_SD", "Nh4_SD")
colnames(cdat2) <- c("chl_mean", "Nh4_mean", "chl_SD", "Nh4_SD")
newdat <- bind_rows(cdat1,cdat2)
newdat
newdat$time <- rep(1:2, each=5)
newdat
newdat$treat <- rep(1:5,2)
newdat
library(ggplot2)
ggplot(newdat, aes(time,chl_mean))+geom_point(aes(color=treat))
newdat$treat <- as.factor(rep(1:5,2))
ggplot(newdat, aes(time,chl_mean))+geom_point(aes(color=treat))
?geom_errorbar
ggplot(newdat, aes(time,chl_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=chl_mean-chl_SD, ymax=chl_mean+chl_SD)
)
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=Nh4_mean-Nh4_SD, ymax=Nh4_mean+Nh4_SD)
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=Nh4_mean-Nh4_SD, ymax=Nh4_mean+Nh4_SD)
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=Nh4_mean-Nh4_SD, ymax=Nh4_mean+Nh4_SD))
View(newdat)
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=Nh4_mean-Nh4_SD, ymax=Nh4_mean+Nh4_SD))
ggplot(newdat, aes(time,Nh4_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=Nh4_mean-Nh4_SD, ymax=Nh4_mean+Nh4_SD))
newdat
131.6 / 2.2
131.6 * 2.2
131.6 * 2
131.6 * 2 / 2.2
new_dat1 <- new_dat[new_dat$time == "1", ]
newdat1 <- newdat[newdat$time == "1", ]
newdat2 <- newdat[newdat$time == "2", ]
new_dat <- rbind(newdat1, newdat2$chl_mean)
new_dat <- rbind(newdat1, data.frame(newdat2$chl_mean))
new_dat <- cbind(newdat1, data.frame(newdat2$chl_mean))
new_dat <- cbind(newdat1, data.frame(chl_mean_end = newdat2$chl_mean))
ggplot(newdat, aes(time, chl_mean_end / chl_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=chl_mean-chl_SD, ymax=chl_mean+chl_SD))
ggplot(newdat, aes(time, chl_mean))+geom_point(aes(color=treat))+
geom_errorbar(aes(ymin=chl_mean-chl_SD, ymax=chl_mean+chl_SD))
ggplot(new_dat, aes(time, chl_mean_end / chl_mean))+geom_point(aes(color=treat))
new_dat
ggplot(new_dat, aes(chl_mean, chl_mean_end / chl_mean))+geom_point(aes(color=treat))
ggplot(new_dat, aes(chl_mean, chl_mean_end / chl_mean))+geom_point(lwd = 5)
cleandat
head(dat)
ggplot(dat, aes(Treatment, 'Chl 2' / 'Chl 1'))+geom_point(lwd = 5)
names(dat)
ggplot(dat, aes(Treatment, 'Chl 2' / 'Chl 1'))+geom_point(lwd = 2)
names(dat); str(dat)
death2 <- function(a,b, chl){
a^b*chl
}
par(mfrow = c(1,1));plot(death2(0.25, 10, seq(40, 200, by = 10)))
death2 <- function(a,b, chl){
a*chl^b
}
par(mfrow = c(1,1));plot(death2(2, 3, seq(40, 200, by = 10)))
death <- function(a,b,chl){
a*chl^(1/b)
}
par(mfrow = c(1,1));plot(death(0.25, 10, seq(40, 200, by = 10)))
fun <- function (dat,a, s,z, sd_chl_proc, sd_nh4_proc, sd_chl_obs, sd_nh4_obs) {
for (i in 1:length(unique(faux$ind))) {  #to follow an individual replicate
for (j in 2:length(unique(faux$time))) { #over each time point
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
z *  subset(faux, ind == unique(faux$ind)[i] & time == unique(faux$time)[j-1])$nh4
#process level in z (nh4)
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4),
log(sd_nh4_proc))
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl <-
# yesterdays chl +
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl+
# a times yesterday nh4/(s +yesterday Nh4)*
((a*faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)/
(s+faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)*
# yesterdays chl-
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl) -
#(D * yesterdays chl)* yesterdays chl so that D is density dependent
death2(2,3, faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl)*
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl
#process level in chl
faux[faux$ind==unique(faux$ind)[i] & faux$time==unique(faux$time)[j], ]$chl <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl),
log(sd_chl_proc))
}
}
#observation level error
faux$chl<- rlnorm(length(faux$chl),log(faux$chl),log(sd_chl_obs))
faux$nh4 <- rlnorm(length(faux$nh4), log(faux$nh4),log(sd_nh4_obs))
return(list(c(a=a,s=s,z=z,sd_chl_proc=sd_chl_proc, sd_nh4_proc=sd_nh4_proc,
sd_chl_obs=sd_chl_obs, sd_nh4_obs=sd_nh4_obs), faux))
}
faux_out[c(1,2)] <- fun(dat=faux,a=1,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
faux <- data.frame(
time = rep(seq(1,27),each=25),
ind = rep(seq(1,25), 27),
chl = c(rep(40,25),rep(0,650)),
nh4 = c(rep(c(3,9,18,36,54),each =5),rep(0,650)))
faux_out <- vector("list", 16)
faux_out[c(1,2)] <- fun(dat=faux,a=1,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
par(mfrow = c(1,1));plot(death2(1, 2, seq(40, 200, by = 10)))
par(mfrow = c(1,1));plot(death2(0.2, 2, seq(40, 200, by = 10)))
faux_out[c(1,2)] <- fun(dat=faux,a=1,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
fun <- function (dat,a, s,z, sd_chl_proc, sd_nh4_proc, sd_chl_obs, sd_nh4_obs) {
for (i in 1:length(unique(faux$ind))) {  #to follow an individual replicate
for (j in 2:length(unique(faux$time))) { #over each time point
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
z *  subset(faux, ind == unique(faux$ind)[i] & time == unique(faux$time)[j-1])$nh4
#process level in z (nh4)
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4),
log(sd_nh4_proc))
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl <-
# yesterdays chl +
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl+
# a times yesterday nh4/(s +yesterday Nh4)*
((a*faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)/
(s+faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)*
# yesterdays chl-
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl) -
#(D * yesterdays chl)* yesterdays chl so that D is density dependent
death2(0.02,2, faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl)*
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl
#process level in chl
faux[faux$ind==unique(faux$ind)[i] & faux$time==unique(faux$time)[j], ]$chl <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl),
log(sd_chl_proc))
}
}
#observation level error
faux$chl<- rlnorm(length(faux$chl),log(faux$chl),log(sd_chl_obs))
faux$nh4 <- rlnorm(length(faux$nh4), log(faux$nh4),log(sd_nh4_obs))
return(list(c(a=a,s=s,z=z,sd_chl_proc=sd_chl_proc, sd_nh4_proc=sd_nh4_proc,
sd_chl_obs=sd_chl_obs, sd_nh4_obs=sd_nh4_obs), faux))
}
faux_out[c(1,2)] <- fun(dat=faux,a=1,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
par(mfrow = c(2, 1)); with(faux_out[[2]], plot(time, nh4)); with(faux_out[[2]], plot(time, log(chl)))
fun <- function (dat,a, s,z, sd_chl_proc, sd_nh4_proc, sd_chl_obs, sd_nh4_obs) {
for (i in 1:length(unique(faux$ind))) {  #to follow an individual replicate
for (j in 2:length(unique(faux$time))) { #over each time point
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
z *  subset(faux, ind == unique(faux$ind)[i] & time == unique(faux$time)[j-1])$nh4
#process level in z (nh4)
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4 <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$nh4),
log(sd_nh4_proc))
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl <-
# yesterdays chl +
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl+
# a times yesterday nh4/(s +yesterday Nh4)*
((a*faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)/
(s+faux[faux$ind==unique(faux$ind)[i]&faux$time==unique(faux$time)[j-1],]$nh4)*
# yesterdays chl-
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl) -
#(D * yesterdays chl)* yesterdays chl so that D is density dependent
death2(0.002,2, faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl)*
faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j-1], ]$chl
#process level in chl
faux[faux$ind==unique(faux$ind)[i] & faux$time==unique(faux$time)[j], ]$chl <-
rlnorm(1,log(faux[faux$ind == unique(faux$ind)[i] & faux$time == unique(faux$time)[j], ]$chl),
log(sd_chl_proc))
}
}
#observation level error
faux$chl<- rlnorm(length(faux$chl),log(faux$chl),log(sd_chl_obs))
faux$nh4 <- rlnorm(length(faux$nh4), log(faux$nh4),log(sd_nh4_obs))
return(list(c(a=a,s=s,z=z,sd_chl_proc=sd_chl_proc, sd_nh4_proc=sd_nh4_proc,
sd_chl_obs=sd_chl_obs, sd_nh4_obs=sd_nh4_obs), faux))
}
faux_out[c(1,2)] <- fun(dat=faux,a=1,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
par(mfrow = c(2, 1)); with(faux_out[[2]], plot(time, nh4)); with(faux_out[[2]], plot(time, log(chl)))
faux_out[c(1,2)] <- fun(dat=faux,a=3,s=20,z=0.9,sd_chl_proc=1.0, sd_nh4_proc=1.0,
sd_chl_obs=1.0, sd_nh4_obs=1.0)
par(mfrow = c(2, 1)); with(faux_out[[2]], plot(time, nh4)); with(faux_out[[2]], plot(time, log(chl)))
warnings()
load("C:/Users/jower/Downloads/msfinal.Rdata")
View(adata2)
View(bigdata2)
unique(bigdata$Dispersal)
library(tidyverse)
?n_distinct
setwd("~/GitHub/CSI_Dispersal/CSI_Dispersal/analyses")
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
install.packages("ecodist")
require("ecodist")
require("ade4")
install.packages("ade4")
require("ade4")
require("png")
install.packages("png")
require("png")
require("MASS")
require("grid")
require("ape")
install.packages("ape")
require("ape")
install.packages("ape")
require("ape")
require("picante")
install.packages("picante")
require("picante")
require("Hmisc")
install.packages("Hmisc")
require("Hmisc")
install.packages("knitr")
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("picante")
# require("venneuler")
require("Hmisc")
require("knitr")
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
setwd("~/GitHub/CSI_Dispersal/CSI_Dispersal/analyses")
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
csi_otu <- read.otu("../data/CSI.shared")
design.env.full <- read.csv("../data/CSI_Design_ENV_Source.csv", row.names=1)
csi.tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
aa <- (rowSums(otu_removal))
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
=======
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
>>>>>>> AP/master
odd.sites <- c("CSI033","CSI101") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
<<<<<<< HEAD
=======
# create presence/absence and relative abundance matrices
>>>>>>> AP/master
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
<<<<<<< HEAD
=======
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
>>>>>>> AP/master
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns.final <- droplevels(design.ns2)
<<<<<<< HEAD
all.equal(rownames(design.ns2), rownames(otu_final.ns))
=======
# create presence/absence and relative abundance matrices
>>>>>>> AP/master
csi_pres_abs.ns <- (otu_final.ns > 0) * 1
csi_relabun.ns <- otu_final.ns
for (i in 1:dim(otu_final.ns)[1]) {
csi_relabun.ns[i, ] <- otu_final.ns[i, ]/sum(otu_final.ns[i,
])
}
csi.full.ns <- cbind(design.ns.final,csi_relabun.ns)
csi.ns <- cbind(design.ns.final,otu_final.ns)
csi.relabun.full <- cbind(design_final,csi_relabun)
csi.PA.full <- cbind(design_final,csi_pres_abs)
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
<<<<<<< HEAD
zoop.ns <- read.csv("../data/zoop_CSI_NoSource.csv", row.names=1)
=======
#matrix comparison - Is there a relationship between zooplankton and bacterial community? = YES Mantel r = 0.409, P<0.0001
dim(otu_final.ns)
zoop.ns <- read.csv("../data/zoop_CSI_NoSource.csv", row.names=1)
#str(zoop.ns)
dim(zoop.ns)
#odd sites for bacteria CSI033 is ShortID ECU_CSI_034
#odd sites for bacteria CSI101 is Short ID	ECU_CSI_103
#deleted IUbarcode CSI041 = CSI 42 - double check
#CSI 27 has zero individuals after source tanks removed
>>>>>>> AP/master
odd.sites <- c("27","42","103")
zoop.ns2 <- zoop.ns[setdiff(rownames(zoop.ns), odd.sites), ]
zoop.ns3 <- zoop.ns2[,-c(1:4)]
zoopREL <- zoop.ns3
for(i in 1:dim(zoop.ns3)[1]){
zoopREL[i,] <- zoop.ns3[i,]/sum(zoop.ns3[i,])
}
<<<<<<< HEAD
=======
# use csi_relabun.ns but drop CSI 27 sample/ IUbarcode ID CSI026	is CSI-027
#csi_relabun.ns
>>>>>>> AP/master
odd.sites <- c("CSI026")
csi_relabun.ns2 <- csi_relabun.ns[setdiff(rownames(csi_relabun.ns), odd.sites), ]
dist.zoop <- vegdist(zoopREL, method = "bray")
dist.bact <- vegdist(csi_relabun.ns2, method = "bray")
require(ade4)
mantel.rtest(dist.zoop, dist.bact, nrepet = 999)
<<<<<<< HEAD
=======
sampleREL.dist1 <- vegdist(csi_relabun.ns, method="bray")
# PERMANOVA
adonis = adonis(csi.full.ns[,-c(1:16)] ~ Date2*Dispersal*Salinity, method = "bray", data = csi.full.ns, perm=1000)
adonis
require("stats")
require("labdsv")
require("mgcv")
require("cluster")
require("vegan")
require("reshape2")
require("reshape")
sampleREL.dist1 <- vegdist(csi_relabun.ns, method="bray")
# PERMANOVA
adonis = adonis(csi.full.ns[,-c(1:16)] ~ Date2*Dispersal*Salinity, method = "bray", data = csi.full.ns, perm=1000)
adonis
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/CSI_Dispersal/analyses/")
} else {
# setwd(choose.dir())
}
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# require("venneuler")
require("Hmisc")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
#NOTE: Tank 3 only had fresh water added. Tank 1 was the source for the salt and tank 2 was the source for the fresh water.
#NOTE: Dispersal 0 (treatments 1 and 2) were source tanks-- no dispersal. Dispersal 1 (treatment 3) only received fresh water. Dispersal 3 (treatments 4,6,8,10) only got salt water. And dispersal 2 (treatments 5,7,9,11) received both fresh and salt.
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.sharedv2")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only - need sreal
design.env.full <- read.csv("../data/CSI_Design_ENV_Source.csv", row.names=1)
# import taxonomy file for later
csi.tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomyv2",
format = "rdp", tax.levels = 6, col.tax = 3)
# load OTU file
csi_otu <- read.otu("../data/CSIv2.shared")
dim(csi_otu)
# import taxonomy file for later
csi.tax <- read.tax(taxonomy = "../data/CSIv2.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# design only with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# design only with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/CSI_Dispersal/analyses/")
} else {
# setwd(choose.dir())
}
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# require("venneuler")
require("Hmisc")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSIv2.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only - need sreal
design.env.full <- read.csv("../data/CSI_Design_ENV_Source.csv", row.names=1)
# design only with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101","CSI041") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/CSI_Dispersal/analyses/")
} else {
# setwd(choose.dir())
}
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# require("venneuler")
require("Hmisc")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSIv2.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only - need sreal
design.env.full <- read.csv("../data/CSI_Design_ENV_Source.csv", row.names=1)
# design only with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101","CSI041") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101","CSI130") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
rowSums(otu_final)
sum(rowSums(otu_final))
sum(rowSums(csi_otu))
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
if(Sys.info()[1] == "Darwin"){
setwd("~/GitHub/CSI_Dispersal/analyses/")
} else {
# setwd(choose.dir())
}
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# require("venneuler")
require("Hmisc")
require("knitr")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
#head(design.ns)
#str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
#csi_otu <- read.otu("../data/CSI.shared")
csi_otu <- read.otu("../data/CSIvsearch.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only - need sreal
design.env.full <- read.csv("../data/CSI_Design_ENV_Source.csv", row.names=1)
csi.tax <- read.tax(taxonomy = "../data/CSIvsearch.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# design only with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101", "CSI130") #IUbarcode
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# create presence/absence and relative abundance matrices
csi_pres_abs.ns <- (otu_final.ns > 0) * 1
csi_relabun.ns <- otu_final.ns
for (i in 1:dim(otu_final.ns)[1]) {
csi_relabun.ns[i, ] <- otu_final.ns[i, ]/sum(otu_final.ns[i,
])
}
# bind design and bact files NO Source
csi.full.ns <- cbind(design.ns.final,csi_relabun.ns)
csi.ns <- cbind(design.ns.final,otu_final.ns)
# bind design and bact files WITH SOURCE
csi.relabun.full <- cbind(design_final,csi_relabun)
dim(csi.relabun.full)
csi.PA.full <- cbind(design_final,csi_pres_abs)
dim(csi.PA.full)
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Combined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000) for uchime mothur run
# Rarefy Abundances (min abundance is 13,229. We are sampling to 13,000) for vsearch mothur run
min(rowSums(otu_final))
otu.rarefy <- rrarefy(otu_final, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon.source <- diversity(otu.rarefy, "shannon")
# Species Richness
richness.source <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J.source <- shannon.source/log(specnumber(otu.rarefy[,-c(1:1)]))
# Combined design,shannon,richness,evenness - no source tanks
csi_otu.div.source <- cbind(design_final, shannon.source,
richness.source,J.source)
# Graphing Shannon Diversity - Treatment Salinity NO SOURCE
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh+salt (2)", "salt only (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
>>>>>>> AP/master
