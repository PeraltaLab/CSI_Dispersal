dim(csi.div.source)
Number1 <- as.factor(csi.div.source$Number)
shannon.lm.source <- lm(shannon.source ~ Date2, data = csi.div.source)
plot(shannon.lm.source)
summary(shannon.lm.source)
shannon.lm.source
anova(shannon.lm.source)
date_1 <- as.factor(design.ns.final$Date2)
labels <- c("0"="Day 0","18"="Day 18", "45"="Day 45")
# Graphing Shannon Diversity - Treatment Salinity NO SOURCE
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Shannon Diversity - Treatment Salinity SOURCE ONLY
p <- ggplot(csi.div.source, aes(x=Date2, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Dispersal Source", values=c("darkgray","blue"), labels = c("saltwater", "freshwater")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Day of Experiment", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
J.lm <- lm(J ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(J.lm)
anova(J.lm)
# run linear regression measured salinity used instead of 'factor' salinity
J.reg <- lm(J~Salinity_real, data = csi_otu.div)
summary(J.reg)
# run for source tanks only
J.lm.source <- lm(J.source ~ Number1, data = csi.div.source)
plot(J.lm.source)
summary(J.lm.source)
anova(J.lm.source)
# Graphing Pielous J - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=J, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Pielou's Evenness (J')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
# Graphing Pielous J - Treatment Salinity SOURCE ONLY
p <- ggplot(csi.div.source, aes(x=Date2, y=J.source, color=as.factor(Number1)))+ scale_color_manual(name="Dispersal Source", values=c("darkgray","blue"), labels = c("saltwater", "freshwater")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Day of Experiment", y = "Pielou's Evenness (J')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
richness.lm <- lm(log(richness) ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(richness.lm)
richness.lm
anova(richness.lm)
# run linear regression measured salinity used instead of 'factor' salinity
richness.reg <- lm(richness~Salinity_real, data = csi_otu.div)
summary(richness.reg)
# run for source tanks only
richness.lm.source <- lm(richness.source ~ Number1, data = csi.div.source)
plot(richness.lm.source)
summary(richness.lm.source)
richness.lm.source
anova(richness.lm.source)
# Graphing richness - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=richness, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Species Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
# Graphing richness - Treatment Salinity SOURCE ONLY
p <- ggplot(csi.div.source, aes(x=Date2, y=richness.source, color=as.factor(Number1)))+ scale_color_manual(name="Dispersal Source", values=c("darkgray","blue"), labels = c("saltwater", "freshwater")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Day of Experiment", y = "Species Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
# run full parametric statistical model SOURCE
Cmin.lm <- lm(Cmin ~ Dispersal*Salinity, data = design.env.full)
plot(Cmin.lm)
Cmin.lm
anova(Cmin.lm)
#subset according to Date2=45 only b/c Cmin only measured for Date2=45
csi.full.ns.Cmin  <- csi.full.ns[which(csi.full.ns$Date2=="45"),]
dim(csi.full.ns)
dim(csi.full.ns.Cmin)
plot(richness.lm)
richness.lm
anova(richness.lm)
# run full parametric statistical model
Cmin.lm <- lm(Cmin ~ Dispersal*Salinity, data = csi.full.ns.Cmin)
Cmin.lm
anova(Cmin.lm)
# run linear regression measured salinity used instead of 'factor' salinity
Cmin.reg <- lm(Cmin~Salinity_real, data = csi.full.ns.Cmin)
summary(Cmin.reg)
#import C-mineralization CSV -- no source tanks
carbon_min <- read.csv("../data/Cmin-data-NO-SOURCE.csv")
p <- ggplot(csi.full.ns.Cmin, aes(x=Salinity, y=Cmin, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = (expression(paste("C Mineralization (ng CO"[2]," mL"^-{1}," day"^-{1},")")))) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p <- ggplot(csi.full.ns.Cmin, aes(x=Salinity_real, y=Cmin, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = (expression(paste("C Mineralization (ng CO"[2]," mL"^-{1}," day"^-{1},")")))) + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
require("stats")
require("labdsv")
require("mgcv")
require("cluster")
require("vegan")
require("reshape2")
require("reshape")
#csi.full <- cbind(design_final,csi_relabun) - ready for stats
#csi.full.ns <- cbind(design.ns.final,csi_relabun.ns) - ready for stats NO SOURCE TANKS
sampleREL.dist1 <- vegdist(csi_relabun.ns, method="bray")
# PERMANOVA
adonis = adonis(csi.full.ns[,-c(1:16)] ~ Date2*Dispersal*Salinity, method = "bray", data = csi.full.ns, perm=1000)
adonis
# Principal Coordinates Analysis - NO SOURCE
CSI_pcoa1 <- cmdscale(sampleREL.dist1, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1a <- round(CSI_pcoa1$eig[1] / sum(CSI_pcoa1$eig), 3) * 100
explainvar2a <- round(CSI_pcoa1$eig[2] / sum(CSI_pcoa1$eig), 3) * 100
sum.eiga <- sum(explainvar1a, explainvar2a)
explainvar1a #17.2
explainvar2a #7.4
all.equal(rownames(design.ns.final), rownames(csi_relabun.ns))
pcoa.groups <- paste(design.ns.final$Date, design.ns.final$Salinity, sep = "_")
pcoa.points <- data.frame(CSI_pcoa1$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
pcoa.col <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 2)) # Salinity
pcoa.shape <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 1))  # Date
df1a <- as.data.frame(pcoa.cent.dataframe)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=pcoa.col, shape = pcoa.shape,
group = interaction(pcoa.col, pcoa.shape))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_fill_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_shape_manual(labels = c("0","18","45"),
values = c(22, 21, 24)) +
coord_cartesian(xlim = c(-0.25, 0.5), ylim = c(-0.35, 0.3)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (17.2%)") + ylab("PCoA 2 (7.4%)") +
labs(fill = "Salinity", shape = "Date") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
# run for source tanks only
csi.div.source1 <- subset(csi.relabun.full, Number == "1")
csi.div.source2 <- subset(csi.relabun.full, Number == "2")
csi.div.source1 #salt source
csi.div.source2 #fresh source
csi.relabun.full2 <- rbind(csi.div.source1,csi.div.source2)
sampleREL.dist2 <- vegdist(csi.relabun.full2[,-c(1:8)], method="bray")
# PERMANOVA
adonis2 <- adonis(csi.relabun.full2[,-c(1:8)] ~ Date*Dispersal*Salinity, method = "bray", data = csi.relabun.full2, perm=1000)
adonis2
# Principal Coordinates Analysis - WITH SOURCE
CSI_pcoa2 <- cmdscale(sampleREL.dist2, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(CSI_pcoa2$eig[1] / sum(CSI_pcoa2$eig), 3) * 100
explainvar2b <- round(CSI_pcoa2$eig[2] / sum(CSI_pcoa2$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #29.1
explainvar2b #9.8
#all.equal(rownames(csi.relabun.full2), rownames(csi_relabun))
pcoa.groups2 <- paste(csi.relabun.full2$Date, csi.relabun.full2$Number, sep = "_")
pcoa.points2 <- data.frame(CSI_pcoa2$points, group = pcoa.groups2)
# Calculate Centroids (mean and SE)
pcoa.L.centroids2 <- melt(pcoa.points2, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids2 <- acast(pcoa.L.centroids2, variable ~ group, mean)
pcoa.centroids.se2 <- acast(pcoa.L.centroids2, variable ~ group, se)
pcoa.centroids.sd2 <- acast(pcoa.L.centroids2, variable ~ group, sd)
# Combine
pcoa.cent.dataframe2 <- cbind(t(pcoa.centroids2), t(pcoa.centroids.se2))
colnames(pcoa.cent.dataframe2) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats2 <- rownames(pcoa.cent.dataframe2)
pcoa.col2 <- as.factor(sapply(strsplit(pcoa.cent.treats2, "_"), `[`, 2)) # Tank Number
pcoa.shape2 <- as.factor(sapply(strsplit(pcoa.cent.treats2, "_"), `[`, 1))  # Date
df1a2 <- as.data.frame(pcoa.cent.dataframe2)
plot1a2 <- ggplot(df1a2, aes(x=V1, y=V2, colour=pcoa.col2, shape = pcoa.shape2,
group = interaction(pcoa.col2, pcoa.shape2))) + theme_bw()
plot1a2 + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col2), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("saltwater","freshwater"),
values = c("#FFFFFF", "#0066CC")) +
scale_fill_manual(labels = c("saltwater","freshwater"),
values = c("#FFFFFF", "#0066CC")) +
scale_shape_manual(labels = c("0","18","45"),
values = c(22, 21, 24)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (29.1%)") + ylab("PCoA 2 (9.8%)") +
labs(fill = "Dispersal Source", shape = "Day of Experiment") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
# run for source tanks only
#use csi.relabun.full dataframe
sampleREL.dist3 <- vegdist(csi.relabun.full[,-c(1:8)], method="bray")
# PERMANOVA
adonis3 <- adonis(csi.relabun.full[,-c(1:8)] ~ Date*Dispersal, method = "bray", data = csi.relabun.full, perm=1000)
adonis3
# Principal Coordinates Analysis - WITH SOURCE
CSI_pcoa3 <- cmdscale(sampleREL.dist3, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(CSI_pcoa3$eig[1] / sum(CSI_pcoa3$eig), 3) * 100
explainvar2b <- round(CSI_pcoa3$eig[2] / sum(CSI_pcoa3$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #20.8
explainvar2b #6.4
pcoa.groups3 <- paste(csi.relabun.full$Date, csi.relabun.full$Dispersal, sep = "_")
pcoa.points3 <- data.frame(CSI_pcoa3$points, group = pcoa.groups3)
# Calculate Centroids (mean and SE)
pcoa.L.centroids3 <- melt(pcoa.points3, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids3 <- acast(pcoa.L.centroids3, variable ~ group, mean)
pcoa.centroids.se3 <- acast(pcoa.L.centroids3, variable ~ group, se)
pcoa.centroids.sd3 <- acast(pcoa.L.centroids3, variable ~ group, sd)
# Combine
pcoa.cent.dataframe3 <- cbind(t(pcoa.centroids3), t(pcoa.centroids.se3))
colnames(pcoa.cent.dataframe3) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats3 <- rownames(pcoa.cent.dataframe3)
pcoa.col3 <- as.factor(sapply(strsplit(pcoa.cent.treats3, "_"), `[`, 2)) # Dispersal
pcoa.shape3 <- as.factor(sapply(strsplit(pcoa.cent.treats3, "_"), `[`, 1))  # Date
df3a <- as.data.frame(pcoa.cent.dataframe3)
plot1a <- ggplot(df3a, aes(x=V1, y=V2, colour=pcoa.col3, shape = pcoa.shape3,
group = interaction(pcoa.col3, pcoa.shape3))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col3), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("0","5","9","13", "extra"),
values = c("#FFFFFF", "#CCFF00", "#00CC00", "#336600", "darkgray")) +
scale_fill_manual(labels = c("TRT fresh","TRT fresh+salt","Control (no dispersal)","Source fresh","Source salt"),
values = c("#FFFFFF", "#CCFF00", "#00CC00", "#336600", "darkgray")) +
scale_shape_manual(labels = c("0","18","45"),
values = c(22, 21, 24)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.8%)") + ylab("PCoA 2 (6.4%)") +
labs(fill = "Dispersal", shape = "Day of Experiment") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
# run for source tanks only
#use csi.relabun.full dataframe
sampleREL.dist4 <- vegdist(csi.relabun.full[,-c(1:8)], method="bray")
# PERMANOVA
adonis4 <- adonis(csi.relabun.full[,-c(1:8)] ~ Date*Dispersal*Salinity, method = "bray", data = csi.relabun.full, perm=1000)
adonis4
# Principal Coordinates Analysis - WITH SOURCE
CSI_pcoa4 <- cmdscale(sampleREL.dist4, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(CSI_pcoa3$eig[1] / sum(CSI_pcoa3$eig), 3) * 100
explainvar2b <- round(CSI_pcoa3$eig[2] / sum(CSI_pcoa3$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #20.8
explainvar2b #6.4
pcoa.groups4 <- paste(csi.relabun.full$Dispersal, csi.relabun.full$Salinity, sep = "_")
pcoa.points4 <- data.frame(CSI_pcoa$points, group = pcoa.groups4)
# run for source tanks only
#use csi.relabun.full dataframe
sampleREL.dist4 <- vegdist(csi.relabun.full[,-c(1:8)], method="bray")
# PERMANOVA
adonis4 <- adonis(csi.relabun.full[,-c(1:8)] ~ Date*Dispersal*Salinity, method = "bray", data = csi.relabun.full, perm=1000)
adonis4
# Principal Coordinates Analysis - WITH SOURCE
CSI_pcoa4 <- cmdscale(sampleREL.dist4, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(CSI_pcoa3$eig[1] / sum(CSI_pcoa3$eig), 3) * 100
explainvar2b <- round(CSI_pcoa3$eig[2] / sum(CSI_pcoa3$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #20.8
explainvar2b #6.4
pcoa.groups4 <- paste(csi.relabun.full$Dispersal, csi.relabun.full$Salinity, sep = "_")
pcoa.points4 <- data.frame(CSI_pcoa$points, group = pcoa.groups4)
pcoa.groups4 <- paste(csi.relabun.full$Dispersal, csi.relabun.full$Salinity, sep = "_")
pcoa.points4 <- data.frame(CSI_pcoa4$points, group = pcoa.groups4)
# Calculate Centroids (mean and SE)
pcoa.L.centroids4 <- melt(pcoa.points4, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids4 <- acast(pcoa.L.centroids4, variable ~ group, mean)
pcoa.centroids.se4 <- acast(pcoa.L.centroids4, variable ~ group, se)
pcoa.centroids.sd4 <- acast(pcoa.L.centroids4, variable ~ group, sd)
# Combine
pcoa.cent.dataframe4 <- cbind(t(pcoa.centroids4), t(pcoa.centroids.se4))
colnames(pcoa.cent.dataframe4) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats4 <- rownames(pcoa.cent.dataframe4)
pcoa.col4 <- as.factor(sapply(strsplit(pcoa.cent.treats4, "_"), `[`, 2)) # Salinity
pcoa.shape4 <- as.factor(sapply(strsplit(pcoa.cent.treats4, "_"), `[`, 1))  # Dispersal
df4a <- as.data.frame(pcoa.cent.dataframe4)
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col4), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_fill_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_shape_manual(labels = c("TRT fresh","TRT fresh+salt","Control (no dispersal)","Source fresh","Source salt"),
values = c(22, 21, 8, 23, 24)) +
geom_text(aes(label=Date),hjust=0, vjust=0) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.8%)") + ylab("PCoA 2 (6.4%)") +
labs(fill = "Salinity", shape = "Dispersal Type") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
df4a <- as.data.frame(pcoa.cent.dataframe4)
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
df4a <- as.data.frame(pcoa.cent.dataframe4)
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4)))
plot4a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
df4a <- as.data.frame(pcoa.cent.dataframe4)
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col4), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_fill_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_shape_manual(labels = c("TRT fresh","TRT fresh+salt","Control (no dispersal)","Source fresh","Source salt"),
values = c(22, 21, 8, 23, 24)) +
geom_text(aes(label=Date),hjust=0, vjust=0) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.8%)") + ylab("PCoA 2 (6.4%)") +
labs(fill = "Salinity", shape = "Dispersal Type") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
# run for source tanks only
#use csi.relabun.full dataframe
sampleREL.dist4 <- vegdist(csi.relabun.full[,-c(1:8)], method="bray")
# PERMANOVA
adonis4 <- adonis(csi.relabun.full[,-c(1:8)] ~ Date*Dispersal*Salinity, method = "bray", data = csi.relabun.full, perm=1000)
adonis4
# Principal Coordinates Analysis - WITH SOURCE
CSI_pcoa4 <- cmdscale(sampleREL.dist4, k=3, eig=TRUE, add=FALSE)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
explainvar1b <- round(CSI_pcoa3$eig[1] / sum(CSI_pcoa3$eig), 3) * 100
explainvar2b <- round(CSI_pcoa3$eig[2] / sum(CSI_pcoa3$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #20.8
explainvar2b #6.4
pcoa.groups4 <- paste(csi.relabun.full$Dispersal, csi.relabun.full$Salinity, sep = "_")
pcoa.points4 <- data.frame(CSI_pcoa4$points, group = pcoa.groups4)
# Calculate Centroids (mean and SE)
pcoa.L.centroids4 <- melt(pcoa.points4, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids4 <- acast(pcoa.L.centroids4, variable ~ group, mean)
pcoa.centroids.se4 <- acast(pcoa.L.centroids4, variable ~ group, se)
pcoa.centroids.sd4 <- acast(pcoa.L.centroids4, variable ~ group, sd)
# Combine
pcoa.cent.dataframe4 <- cbind(t(pcoa.centroids4), t(pcoa.centroids.se4))
colnames(pcoa.cent.dataframe4) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats4 <- rownames(pcoa.cent.dataframe4)
pcoa.col4 <- as.factor(sapply(strsplit(pcoa.cent.treats4, "_"), `[`, 2)) # Salinity
pcoa.shape4 <- as.factor(sapply(strsplit(pcoa.cent.treats4, "_"), `[`, 1))  # Dispersal
df4a <- as.data.frame(pcoa.cent.dataframe4)
df4a <- as.data.frame(pcoa.cent.dataframe4)
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col4), colour = "black", size=6, stroke = 0.75) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
scale_colour_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_fill_manual(labels = c("0","5","9","13"),
values = c("#FFFFFF", "#00FFFF", "#33CCCC", "#0066CC")) +
scale_shape_manual(labels = c("TRT fresh","TRT fresh+salt","Control (no dispersal)","Source fresh","Source salt"),
values = c(22, 21, 8, 23, 24)) +
geom_text(aes(label=Date),hjust=0, vjust=0) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (20.8%)") + ylab("PCoA 2 (6.4%)") +
labs(fill = "Salinity", shape = "Dispersal Type") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")),
shape = guide_legend(override.aes = list(size = 4, fill="black")))
plot4a
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4))) + theme_bw()
plot4a <- ggplot(df4a, aes(x=V1, y=V2, colour=pcoa.col4, shape = pcoa.shape4, label=Date,
group = interaction(pcoa.col4, pcoa.shape4)))
plot4a
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
require("venneuler")
require("Hmisc")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
install.packages("venneuler")
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
require("venneuler")
require("Hmisc")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
rm(list = ls())
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
require("venneuler")
require("Hmisc")
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
csi_otu <- read.otu("../data/CSI.shared")
