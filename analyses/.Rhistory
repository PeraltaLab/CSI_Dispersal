# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,
])
}
# import taxonomy file for later
csi_tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy", format = "rdp", tax.levels = 6, col.tax = 3)
# bind design and bact files
csi.full <- cbind(design_final,csi_relabun)
# df <- decostand(csi_relabun, method="standardize")
# NOTE need to specify method.. not sure if this one is right - do not need to run decostand b/c relative abundance calculated manually in lines 99-101
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
#design without source tanks
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
dim(design.ns2)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(otu_final.ns)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns <- design.ns[-(which(rownames(design.ns) == missing)), ]
missing <- setdiff(rownames(otu_final.ns), rownames(design.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
missing <- setdiff(rownames(otu_final.ns), rownames(design.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
dim(otu_final.ns)
dim(design.ns)
dim(design.full)
dim(csi_otu)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
design.ns.final <- droplevels(design.ns2)
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,
])
}
# import taxonomy file for later
csi_tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy", format = "rdp", tax.levels = 6, col.tax = 3)
# bind design and bact files
csi.full <- cbind(design_final,csi_relabun)
# df <- decostand(csi_relabun, method="standardize")
# NOTE need to specify method.. not sure if this one is right - do not need to run decostand b/c relative abundance calculated manually in lines 99-101
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
dim(design.ns2)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
dim(design.ns)
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
missing
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,
])
}
# import taxonomy file for later
csi_tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy", format = "rdp", tax.levels = 6, col.tax = 3)
# bind design and bact files
csi.full <- cbind(design_final,csi_relabun)
# df <- decostand(csi_relabun, method="standardize")
# NOTE need to specify method.. not sure if this one is right - do not need to run decostand b/c relative abundance calculated manually in lines 99-101
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns <- design.ns[-(which(rownames(design.ns) == missing)), ]
design.ns <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns)
dim(design.ns2)
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
design_ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
dim(design.ns)
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
rm(list = ls())
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design_ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
dim(design.ns)
dim(otu_final.ns)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
odd.sites
dim(otu_final)
dim(design_final)
design_ns
dim(design_ns)
design_ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
dim(design.ns)
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
dim(design.ns)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,
])
}
# import taxonomy file for later
csi_tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy", format = "rdp", tax.levels = 6, col.tax = 3)
# bind design and bact files
csi.full <- cbind(design_final,csi_relabun)
# df <- decostand(csi_relabun, method="standardize")
# NOTE need to specify method.. not sure if this one is right - do not need to run decostand b/c relative abundance calculated manually in lines 99-101
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielou’s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# run full parametric statistical model
shannon.lm <- lm(shannon ~ Dispersal*Salinity*Date+Dispersal*Salinity+Salinity*Date+Dispersal*Date+Dispersal+Salinity+Date, data = csi_otu.div)
shannon.lm
anova(shannon.lm)
# run linear regression measured salinity used instead of 'factor' salinity
shannon.reg <- lm(shannon~Salinity_real, data = csi_otu.div)
summary(shannon.reg)
## maybe use Werba code - discuss with Jo and McCoy
# Graphing Shannon Diversity - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity") + ylab("Shannon Diversity Index (H')")
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Shannon Diversity x MEASURED Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity_real, y=shannon, color=Dispersal))+geom_point()
p1=p+geom_smooth(method="lm",aes(fill=Dispersal))
p1 + theme_bw()
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1.25)) + theme(axis.ticks.length=unit(0.3,"cm")) + xlab("Salinity (measured)") + ylab("Shannon Diversity Index (H')")
ggsave("../figures/shannon_SalReal.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
