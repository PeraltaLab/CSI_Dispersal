dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients
design.env.full <- read.csv("../data/design_CSI.csv", row.names=1)
# import taxonomy file for later
csi.tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
csi_pres_abs.ns <- (otu_final.ns > 0) * 1
csi_relabun.ns <- otu_final.ns
for (i in 1:dim(otu_final.ns)[1]) {
csi_relabun.ns[i, ] <- otu_final.ns[i, ]/sum(otu_final.ns[i,
])
}
csi.full.ns <- cbind(design.ns.final,csi_relabun.ns)
csi.ns <- cbind(design.ns.final,otu_final.ns)
csi.relabun.full <- cbind(design_final,csi_relabun)
dim(csi.relabun.full)
csi.PA.full <- cbind(design_final,csi_pres_abs)
dim(csi.PA.full)
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielouâ€™s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# run full parametric statistical model
shannon.lm <- lm(shannon ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(shannon.lm)
shannon.lm
anova(shannon.lm)
# run linear regression measured salinity used instead of 'factor' salinity
shannon.reg <- lm(shannon~Salinity_real, data = csi_otu.div)
summary(shannon.reg)
date_1 <- as.factor(design.ns.final$Date2)
labels <- c("0"="Day 0","18"="Day 18", "45"="Day 45")
# Graphing Shannon Diversity - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1
require("Hmisc")
install.packages("Hmisc", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
require("Hmisc")
# run full parametric statistical model
shannon.lm <- lm(shannon ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(shannon.lm)
shannon.lm
anova(shannon.lm)
# run linear regression measured salinity used instead of 'factor' salinity
shannon.reg <- lm(shannon~Salinity_real, data = csi_otu.div)
summary(shannon.reg)
date_1 <- as.factor(design.ns.final$Date2)
labels <- c("0"="Day 0","18"="Day 18", "45"="Day 45")
# Graphing Shannon Diversity - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# run full parametric statistical model
J.lm <- lm(J ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(J.lm)
anova(J.lm)
# run linear regression measured salinity used instead of 'factor' salinity
J.reg <- lm(J~Salinity_real, data = csi_otu.div)
summary(J.reg)
# Graphing Pielous J - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=J, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Pielou's Evenness (J')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/pielousj.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# run full parametric statistical model
richness.lm <- lm(log(richness) ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(richness.lm)
richness.lm
anova(richness.lm)
# run linear regression measured salinity used instead of 'factor' salinity
richness.reg <- lm(richness~Salinity_real, data = csi_otu.div)
summary(richness.reg)
# Graphing richness - Treatment Salinity
p <- ggplot(csi_otu.div, aes(x=Salinity, y=richness, color=as.factor(Dispersal)))+ scale_color_manual(name="Dispersal Treatment", values=c("black","purple"), labels = c("fresh (2)", "fresh+salt (3)")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Salinity", y = "Species Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/richness.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
csi.full.ns.Cmin  <- csi.full.ns[which(csi.full.ns$Date2=="45"),]
dim(csi.full.ns)
dim(csi.full.ns.Cmin)
str(csi.full.ns.Cmin)
csi.full.ns.Cmin  <- csi.full.ns[which(csi.full.ns$Date2=="45"),]
dim(csi.full.ns)
dim(csi.full.ns.Cmin)
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
require("venneuler")
require("Hmisc")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
#NOTE: Tank 3 only had fresh water added. Tank 1 was the source for the salt and tank 2 was the source for the fresh water.
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only
design.env.full <- read.csv("../data/design_CSI.csv", row.names=1)
# import taxonomy file for later
csi.tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# create presence/absence and relative abundance matrices
csi_pres_abs.ns <- (otu_final.ns > 0) * 1
csi_relabun.ns <- otu_final.ns
for (i in 1:dim(otu_final.ns)[1]) {
csi_relabun.ns[i, ] <- otu_final.ns[i, ]/sum(otu_final.ns[i,
])
}
# bind design and bact files NO Source
csi.full.ns <- cbind(design.ns.final,csi_relabun.ns)
csi.ns <- cbind(design.ns.final,otu_final.ns)
# bind design and bact files WITH SOURCE
csi.relabun.full <- cbind(design_final,csi_relabun)
dim(csi.relabun.full)
csi.PA.full <- cbind(design_final,csi_pres_abs)
dim(csi.PA.full)
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielouâ€™s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
min(rowSums(otu_final))
otu.rarefy <- rrarefy(otu_final, 13000)
shannon.source <- diversity(otu.rarefy, "shannon")
richness.source <- rowSums((otu.rarefy >= 1))
J.source <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
csi_otu.div.source <- cbind(design.final,shannon.source,richness.source,J.source)
csi_otu.div.source <- cbind(design_final,shannon.source,richness.source,J.source)
str(csi_otu.div.source)
csi_otu.div.sourceONLY <- csi_otu.div.source[csi_otu.div.source$Number == '1' & '2']
csi_otu.div.sourceONLY <- csi_otu.div.source[csi_otu.div.source$Number == '1' & csi_otu.div.source$Number == '2']
csi.div.source <- csi_otu.div.source[csi_otu.div.source$Number == '1' & csi_otu.div.source$Number == '2']
dim(csi.div.source)
csi.div.source <- csi_otu.div.source[csi_otu.div.source$Tank_Name == 'Source_13' & 'Source_0']
csi.div.source <- csi_otu.div.source[csi_otu.div.source$Tank_Name == 'Source_13' & csi_otu.div.source$Tank_Name == 'Source_0']
dim(csi.div.source)
dim(csi_otu.div.source)
csi.div.source <- subset(csi_otu.div.source, Tank_Name == 'Source_13' & 'Source_0']
csi.div.source <- subset(csi_otu.div.source, Tank_Name == "Source_13" & "Source_0"]
csi.div.source <- subset(csi_otu.div.source, Tank_Name == "Source_13" & "Source_0")
csi.div.source <- subset(csi_otu.div.source, Number == "1" & "2")
csi.div.source <- subset(csi_otu.div.source, Number == "1")
csi.div.source2 <- subset(csi_otu.div.source, Number == "2")
dim(csi.div.source2)
dim(csi.div.source1)
csi.div.source1 <- subset(csi_otu.div.source, Number == "1")
csi.div.source1 <- subset(csi_otu.div.source, Number == "1")
csi.div.source2 <- subset(csi_otu.div.source, Number == "2")
csi.div.source1
csi.div.source2
csi.div.source <- rbind(csi.div.source1,csi.div.source2)
dim(csi.div.source)
str(csi.div.source)
shannon.lm.source <- lm(shannon.source ~ Number*Date, data = csi.div.source)
plot(shannon.lm.source)
shannon.lm.source
anova(shannon.lm.source)
date_1 <- as.factor(design.ns.final$Date2)
labels <- c("0"="Day 0","18"="Day 18", "45"="Day 45")
p <- ggplot(csi.div.source, aes(x=Number, y=shannon, color=as.factor(Dispersal)))+ scale_color_manual(name="Source", values=c("black","purple"), labels = c("salt", "fresh"))
p
p <- ggplot(csi.div.source, aes(x=Number, y=shannon, color=as.factor(Number)))+ scale_color_manual(name="Source", values=c("black","purple"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p <- ggplot(csi.div.source, aes(x=Number, y=shannon.source, color=as.factor(Number)))+ scale_color_manual(name="Source", values=c("black","purple"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
Number <- as.factor(csi.div.source$Number)
p <- ggplot(csi.div.source, aes(x=Number, y=shannon.source, color=as.factor(Number)))+ scale_color_manual(name="Source", values=c("black","purple"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
str(csi.div.source)
Number1 <- as.factor(csi.div.source$Number)
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source", values=c("black","purple"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source", values=c("gray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p1=p+geom_smooth(method="lm")+facet_wrap(~Date2)+facet_grid(. ~ Date2, labeller=labeller(Date2 = labels))
p1
p1=p+geom_smooth(method="lm")+facet_wrap(~Date)+facet_grid(. ~ Date, labeller=labeller(Date = labels))
p1
p1=p+geom_smooth(method="lm")+facet_wrap(~Date)
p1
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Number", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Number", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date)
p1
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date)+facet_grid(. ~ Date, labeller=labeller(Date = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Source", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
str(csi.div.source)
summary(shannon.source)
summary(shannon.lm.source)
Number1 <- as.factor(csi.div.source$Number)
shannon.lm.source <- lm(shannon.source ~ Number1, data = csi.div.source)
plot(shannon.lm.source)
summary(shannon.lm.source)
shannon.lm.source
anova(shannon.lm.source)
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Date)+facet_grid(. ~ Date, labeller=labeller(Date = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Source", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(csi.div.source, aes(x=Number1, y=shannon.source, color=as.factor(Date)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p <- ggplot(csi.div.source, aes(x=Date, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Source", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(csi.div.source, aes(x=Date, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+boxplot(method="lm")
geom_smooth
p <- ggplot(csi.div.source, aes(x=Date, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Source", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
p <- ggplot(csi.div.source, aes(x=Date, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
#PC - set WD manually by Session -> Set Working Directory -> Choose Directory...
rm(list = ls())
#Set source R tools
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
#load req'd packages
require("vegan")
require("dplyr")
require("nlme")
require("reshape2")
require("ecodist")
require("ggplot2")
require("ade4")
require("png")
require("MASS")
require("grid")
require("ape")
require("png")
require("picante")
require("venneuler")
require("Hmisc")
# set std err
se <- function(x, ...) {
sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))
}
ci <- function(x, ...) {
1.96 * sd(x, na.rm = TRUE)
}
#NOTE: Tank 3 only had fresh water added. Tank 1 was the source for the salt and tank 2 was the source for the fresh water.
# load design file - no source tanks
design.ns <- read.csv("../data/CSI_Design_ENV_NoSourceTanks.csv", row.names=1)
head(design.ns)
str(design.ns)
dim(design.ns)
# load design file - with source tanks but missing decomp, nutrients, sreal, Date2 columns
design.full <- read.csv("../data/design_CSI.csv", row.names=1)
design.full <- design.full[-c(grep("mock community", design.full$CSI_ID)), ]
dim(design.full)
# load OTU file
csi_otu <- read.otu("../data/CSI.shared")
dim(csi_otu)
# load environ/function file - includes expt design, decomp data, Cmin, nutrients day 45 only
design.env.full <- read.csv("../data/design_CSI.csv", row.names=1)
# import taxonomy file for later
csi.tax <- read.tax(taxonomy = "../data/CSI.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# remove extra site (no mock community)
# design with source tanks
missing <- setdiff(rownames(design.full), rownames(csi_otu))
design.full <- design.full[-(which(rownames(design.full) == missing)), ]
dim(design.full)
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- csi_otu[, which(colSums(csi_otu) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa # CSI033-7180 reads CSI101=75 reads - removed
# OTU table - removed low abundance samples
csi_low_remov <- otu_removal[which(rowSums(otu_removal) >= 13000), ]
dim(csi_low_remov)
# OTU table - odd sites in bacterial composition data and remove in design file
odd.sites <- c("CSI033","CSI101")
otu_final <- csi_low_remov[setdiff(rownames(csi_low_remov), odd.sites), ]
design_final <- design.full[setdiff(rownames(design.full), odd.sites), ]
design.ns <- design.ns[setdiff(rownames(design.ns), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
# create presence/absence and relative abundance matrices
csi_pres_abs <- (otu_final > 0) * 1
csi_relabun <- otu_final
for (i in 1:dim(otu_final)[1]) {
csi_relabun[i, ] <- otu_final[i, ]/sum(otu_final[i,])
}
# REMOVE source tanks from otu file
# REMOVE source tanks Number 1,2,3 from otu_final and use design.ns (manually removed source tanks)
temp <- rownames(design_final[which(design_final$Number %in% c(1,2,3)), ])
otu_final.ns <- otu_final[-(which(rownames(otu_final) %in% temp)), ]
dim(otu_final.ns)
dim(design.ns)
#drop missing data
missing <- setdiff(rownames(design.ns), rownames(otu_final.ns))
design.ns2 <- design.ns[-(which(rownames(design.ns) == missing)), ]
dim(design.ns2)
# Drop levels of factors that are no longer in data set
design.ns.final <- droplevels(design.ns2)
all.equal(rownames(design.ns2), rownames(otu_final.ns))
# create presence/absence and relative abundance matrices
csi_pres_abs.ns <- (otu_final.ns > 0) * 1
csi_relabun.ns <- otu_final.ns
for (i in 1:dim(otu_final.ns)[1]) {
csi_relabun.ns[i, ] <- otu_final.ns[i, ]/sum(otu_final.ns[i,
])
}
# bind design and bact files NO Source
csi.full.ns <- cbind(design.ns.final,csi_relabun.ns)
csi.ns <- cbind(design.ns.final,otu_final.ns)
# bind design and bact files WITH SOURCE
csi.relabun.full <- cbind(design_final,csi_relabun)
dim(csi.relabun.full)
csi.PA.full <- cbind(design_final,csi_pres_abs)
dim(csi.PA.full)
# Set treatments
treatments1 <- as.factor(design.ns.final$Salinity)
levels(treatments1) <- c("0","5","9","13")
treatments2 <- as.factor(design.ns.final$Dispersal)
levels(treatments2) <- c("2","3")
date_1 <- as.factor(design.ns.final$Date2)
# Rarefy Abundances (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final.ns))
otu.rarefy <- rrarefy(otu_final.ns, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon <- diversity(otu.rarefy, "shannon")
# Species Richness
richness <- rowSums((otu.rarefy >= 1))
# Pielouâ€™s evenness
J <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div <- cbind(design.ns.final,shannon,richness,J)
# Rarefy Abundances with SOURCES (min abundance is 13,240. We are sampling to 13,000)
min(rowSums(otu_final))
otu.rarefy <- rrarefy(otu_final, 13000)
# Calculate Shannon H' (called shannon) using full data set (WITH source tanks)
shannon.source <- diversity(otu.rarefy, "shannon")
# Species Richness
richness.source <- rowSums((otu.rarefy >= 1))
# Pielouâ€™s evenness
J.source <- shannon/log(specnumber(otu.rarefy[,-c(1:1)]))
# Dombined design,shannon,richness,evenness - no source tanks
csi_otu.div.source <- cbind(design_final,shannon.source,richness.source,J.source)
# run full parametric statistical model
shannon.lm <- lm(shannon ~ Dispersal*Salinity*Date, data = csi_otu.div)
plot(shannon.lm)
shannon.lm
anova(shannon.lm)
# run linear regression measured salinity used instead of 'factor' salinity
shannon.reg <- lm(shannon~Salinity_real, data = csi_otu.div)
summary(shannon.reg)
# run for source tanks only
csi.div.source1 <- subset(csi_otu.div.source, Number == "1")
csi.div.source2 <- subset(csi_otu.div.source, Number == "2")
csi.div.source1 #salt source
csi.div.source2 #fresh source
csi.div.source <- rbind(csi.div.source1,csi.div.source2)
dim(csi.div.source)
Number1 <- as.factor(csi.div.source$Number)
shannon.lm.source <- lm(shannon.source ~ Number1, data = csi.div.source)
plot(shannon.lm.source)
summary(shannon.lm.source)
shannon.lm.source
anova(shannon.lm.source)
date_1 <- as.factor(design.ns.final$Date2)
labels <- c("0"="Day 0","18"="Day 18", "45"="Day 45")
p <- ggplot(csi.div.source, aes(x=Date, y=shannon.source, color=as.factor(Number1)))+ scale_color_manual(name="Source Communities", values=c("darkgray","blue"), labels = c("salt", "fresh")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Date", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.source.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
